{"version":3,"sources":["components/App/images/logo.svg","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","App","toggleThemeChange","state","checked","console","log","localStorage","setItem","document","getElementsByTagName","setAttribute","setState","theme","getItem","this","className","src","logo","alt","href","target","rel","htmlFor","id","type","defaultChecked","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,kC,8MC0F5BC,G,kBArFX,aAAe,IAAD,8BACV,+CAqBJC,kBAAoB,WACI,EAAKC,MAAjBC,SAaJC,QAAQC,IAAI,mBAEZC,aAAaC,QAAQ,QAAS,SAC9BC,SAASC,qBAAqB,QAAQ,GAAGC,aAAa,aAAc,SAEpE,EAAKC,SAAS,CACVR,SAAS,EACTS,MAAO,YAjBXR,QAAQC,IAAI,kBAEZC,aAAaC,QAAQ,QAAS,QAC9BC,SAASC,qBAAqB,QAAQ,GAAGC,aAAa,aAAc,QAEpE,EAAKC,SAAS,CACVR,SAAS,EACTS,MAAO,WA/Bf,EAAKV,MAAQ,CAETC,QAA2C,SAAlCG,aAAaO,QAAQ,SAM9BD,MAAON,aAAaO,QAAQ,SAAWP,aAAaO,QAAQ,SAAW,SAVjE,E,iFAcO,IACTD,EAAUE,KAAKZ,MAAfU,MACRR,QAAQC,IAAIC,aAAaO,QAAQ,UAEjCT,QAAQC,IAAIO,GACZJ,SAASC,qBAAqB,QAAQ,GAAGC,aAAa,aAAcE,K,+BA6B9D,IAAD,OACGT,EAAYW,KAAKZ,MAAjBC,QAER,OACI,yBAAKY,UAAU,OACX,4BAAQA,UAAU,cACd,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,sCAEI,4CAFJ,2BAKA,uBACIH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJR,eAQA,gEACA,2BAAON,UAAU,SAASO,QAAQ,gBAC9B,2BACIC,GAAG,eACHC,KAAK,WAELC,eAAgBtB,EAChBuB,SAAU,kBAAM,EAAKzB,uBAEzB,0BAAMc,UAAU,wB,GA9EtBY,cCQEC,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXvCC,IAASC,OAAO,kBAAC,EAAD,MAAS1B,SAAS2B,eAAe,SD0HzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GAC/BA,EAAaC,kB","file":"static/js/main.225752a8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './images/logo.svg';\nimport './App.css';\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            // Keep the switch on if the theme is dark\n            checked: localStorage.getItem('theme') === 'dark',\n            /**\n             * store the value on localstorage\n             * default value - light\n             * option: dark, light\n             */\n            theme: localStorage.getItem('theme') ? localStorage.getItem('theme') : 'light',\n        };\n    }\n\n    componentDidMount() {\n        const { theme } = this.state;\n        console.log(localStorage.getItem('theme'));\n        // Update the data-theme attribute of our html tag\n        console.log(theme);\n        document.getElementsByTagName('HTML')[0].setAttribute('data-theme', theme);\n    }\n\n    toggleThemeChange = () => {\n        const { checked } = this.state;\n        // If theme is light then change to dark\n        if (!checked) {\n            console.log('change to dark');\n            // Update localstorage\n            localStorage.setItem('theme', 'dark');\n            document.getElementsByTagName('HTML')[0].setAttribute('data-theme', 'dark');\n\n            this.setState({\n                checked: true,\n                theme: 'dark',\n            });\n        } else {\n            console.log('change to light');\n            // Update localstorage\n            localStorage.setItem('theme', 'light');\n            document.getElementsByTagName('HTML')[0].setAttribute('data-theme', 'light');\n\n            this.setState({\n                checked: false,\n                theme: 'light',\n            });\n        }\n    };\n\n    render() {\n        const { checked } = this.state;\n\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    <p>\n                        Edit&nbsp;\n                        <code>src/App.js</code>\n                        &nbsp;and save to reload.\n                    </p>\n                    <a\n                        className=\"App-link\"\n                        href=\"https://reactjs.org\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        Learn React\n                    </a>\n                    <p>Click the switch to toggle themes</p>\n                    <label className=\"switch\" htmlFor=\"theme-switch\">\n                        <input\n                            id=\"theme-switch\"\n                            type=\"checkbox\"\n                            // checked={this.state.checked}\n                            defaultChecked={checked}\n                            onChange={() => this.toggleThemeChange()}\n                        />\n                        <span className=\"slider round\" />\n                    </label>\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            // eslint-disable-next-line no-param-reassign\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}